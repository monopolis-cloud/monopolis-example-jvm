name: user-directory-deploy
'on':
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to deploy user-directory to.
        required: true
        type: environment
      user-directory-sha:
        description: Version of user-directory to deploy.
        required: true
        type: string
      security-system-sha:
        description: Version of security-system to run upstream CDCs against.
        required: false
        type: string
      deployment-status-url:
        description: URL for status updates to be sent to.
        required: false
        type: string
jobs:
  Start:
    environment: ${{ github.event.inputs.environment }}
    needs: [
      ]
    steps:
    - uses: rsotnychenko/deployment-status-update@0.2.0
      name: Report deploy as in_progress
      with:
        run_id: ${{ github.run_id }}
        status: in_progress
        deployment_status_url: ${{ github.event.inputs.deployment-status-url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ github.event.inputs.deployment-status-url != null }}
    runs-on: ubuntu-latest
  CDC-security-system-to-user-directory:
    needs:
    - Start
    steps:
    - run: echo run upstream CDCS here
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.security-system-sha != null }}
  Deploy-user-directory:
    concurrency: production
    needs:
    - Start
    - CDC-security-system-to-user-directory
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: monopolis-user-directory
          heroku_email:  ${{secrets.HEROKU_EMAIL}}
          procfile: "web: user-directory/build/install/user-directory/bin/user-directory $PORT"
    runs-on: ubuntu-latest
    if: ${{ always()  && (needs.CDC-security-system-to-user-directory.result == 'skipped'
      || needs.CDC-security-system-to-user-directory.result == 'success') }}
  End:
    needs:
    - Deploy-user-directory
    steps:
    - uses: rsotnychenko/deployment-status-update@0.2.0
      name: Report deploy as ${{ needs.Deploy-user-directory.result }}
      with:
        run_id: ${{ github.run_id }}
        status: ${{ needs.Deploy-user-directory.result }}
        deployment_status_url: ${{ github.event.inputs.deployment-status-url }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ github.event.inputs.deployment-status-url != null }}
    runs-on: ubuntu-latest
    if: ${{ always() }}
